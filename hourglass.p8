pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
--phantom hourglass
--by jared

--track all entities
entities={}
debug=true
--include a position table
function newpos(x,y,w,h)
 local p={}
 p.x = x
 p.y = y
 p.w = w
 p.h = h
 return p
end
--and sprite table values
function newsprite(sl,i)
	local s={}
 s.spritelist=sl
 s.index=i
 s.flip=false
	return s
end
--and sprite animation
function newanimation(d,t)
 local a={}
	a.timer=0
	a.delay=d
	a.type=t
 return a
end
--add controls
function newcontrols(l,r,u,d,inp)
	local c={}
	c.left=l
	c.right=r
	c.up=u
	c.down=d
 c.input=inp
 return c
end
--and respective inputs
function playerinput(ent)
 ent.intent.left=btn(ent.cont.left)
 ent.intent.right=btn(ent.cont.right)
 ent.intent.up=btn(ent.cont.up)
 ent.intent.down=btn(ent.cont.down)
 ent.intent.moving=ent.intent.left or ent.intent.right or
                   ent.intent.up or ent.intent.down
end
function npcinput(ent)

end
--and intentions
function newintention()
 local i={}
 i.left=false
 i.right=false
 i.up=false
 i.up=false
 i.moving=false
 return i
end
--modify boundaries
function newbounds(xoff,yoff,w,h)
	local b={}
	b.xoff=xoff
	b.yoff=yoff
	b.w=w
	b.h=h
	return b
end
--can they walk there?
function canwalk(x,y,mx,my)
 return not fget(mget(x/8+mx,y/8+my),7)
end
--are they touching?
function touching(x1,y1,w1,h1,x2,y2,w2,h2)
 return
 x1+w1 > x2	and
 x1 < x2+w2 and
 y1+h1 > y2 and
 y1 < y2+h2
end
--initialize entity
function newent(position,sprite,control,intention,bounds,animation)
 local e={}
 e.pos=position
 e.sprite=sprite
 e.cont=control
 e.intent=intention
 e.bounds=bounds
 e.anime=animation
 return e
end

--sorting algorithm(s)
function sort(list,compare)
	local i
 for i=2,#list do
 	local j=i
 	
 	while j>1 and compare(list[j-1],list[j]) do
 		entities[j],entities[j-1]=entities[j-1],entities[j]
 		j-=1
 	end
 end
end
function ycompare(a,b)
	if a.pos.y==nil or b.pos.y==nil then return false end
	return a.pos.y+a.pos.h > b.pos.y+b.pos.h
end

--graphics system
gs={}
gs.update=function()
	camera(-64+player.pos.x+player.pos.w/2,
        -64+player.pos.y+player.pos.h/2)
 if btnp(üÖæÔ∏è) then
  m=change_tz(mapx,mapy)
  sfx(1)
 end
	--load map:
	cls()
	map(m[1],m[2],0,0,16,16)
	print("x:"..m[1].."y:"..m[2],0,0,7)
 --load sprites:
 sort(entities,ycompare)
 
 for ent in all(entities) do
  --flip?
  if ent.sprite and ent.intent then
  	if not(ent.sprite.flip) and ent.intent.left then
  		ent.sprite.flip=true end
  	if ent.sprite.flip and ent.intent.right then
  	 ent.sprite.flip=false end
  end
 
  if ent.sprite and ent.pos then
   sspr(ent.sprite.spritelist[ent.sprite.index][1],
        ent.sprite.spritelist[ent.sprite.index][2],
        ent.pos.w, ent.pos.h,
        ent.pos.x, ent.pos.y,
        ent.pos.w, ent.pos.h,
        ent.sprite.flip,false)
  end

  if debug then
   rect(ent.pos.x+ent.bounds.xoff,
       ent.pos.y+ent.bounds.yoff,
       ent.pos.x+ent.bounds.xoff+ent.bounds.w-1,
       ent.pos.y+ent.bounds.yoff+ent.bounds.h-1,9)
  end
  
 end
 camera()
end
--animation system
as={}
as.update=function()
	for ent in all(entities) do
		if ent.sprite and ent.anime then
   if ent.anime.type=="always" or 
      (ent.anime.type=="walk" and ent.intent and ent.intent.moving) then
    --increment timer
    ent.anime.timer+=1
    if ent.anime.timer > ent.anime.delay then
     --increment frame
     ent.sprite.index+=1
     if ent.sprite.index > #ent.sprite.spritelist then
      ent.sprite.index=1
     end
     --reset timer
     ent.anime.timer=0
    end
   else
    ent.sprite.index=1
   end
		end
	end
end
--control system
cs={}
cs.update=function()
 --assign input controls to entities
	for ent in all(entities) do
  if ent.cont and ent.intent then
   ent.cont.input(ent)
  end
 end 
end
--physics system
ps={}
ps.update=function()
 --sets position for all entities
 for ent in all(entities) do
  local newx=ent.pos.x
  local newy=ent.pos.y
  
  if ent.pos and ent.intent then
   if ent.intent.left then newx-=.5 end
   if ent.intent.right then newx+=.5 end
   if ent.intent.up then newy-=.5 end
   if ent.intent.down then newy+=.5 end
  end

  local move_x=true
  local move_y=true
  
  --map collisions:
  --horizontal moves
  if not canwalk(newx+ent.bounds.xoff,ent.pos.y+ent.bounds.yoff,m[1],m[2]) or
     not canwalk(newx+ent.bounds.xoff,ent.pos.y+ent.bounds.yoff+ent.bounds.h-1,m[1],m[2]) or
     not canwalk(newx+ent.bounds.xoff+ent.bounds.w-1,ent.pos.y+ent.bounds.yoff,m[1],m[2]) or
     not canwalk(newx+ent.bounds.xoff+ent.bounds.w-1,ent.pos.y+ent.bounds.yoff+ent.bounds.h-1,m[1],m[2]) then
   move_x=false
  end
  --vertical moves
  if not canwalk(ent.pos.x+ent.bounds.xoff,newy+ent.bounds.yoff,m[1],m[2]) or
     not canwalk(ent.pos.x+ent.bounds.xoff,newy+ent.bounds.yoff+ent.bounds.h-1,m[1],m[2]) or
     not canwalk(ent.pos.x+ent.bounds.xoff+ent.bounds.w-1,newy+ent.bounds.yoff,m[1],m[2]) or
     not canwalk(ent.pos.x+ent.bounds.xoff+ent.bounds.w-1,newy+ent.bounds.yoff+ent.bounds.h-1,m[1],m[2]) then
   move_y=false
  end

  --entity collisions:
  for o in all(entities) do
   if o!=ent then
    --horizontal moves
    if touching(newx+ent.bounds.xoff,ent.pos.y+ent.bounds.yoff,ent.bounds.w,ent.bounds.h,
            o.pos.x+o.bounds.xoff,o.pos.y+o.bounds.yoff,o.bounds.w,o.bounds.h) then
     move_x=false
    end
    --vertical moves
    if touching(ent.pos.x+ent.bounds.xoff,newy+ent.bounds.yoff,ent.bounds.w,ent.bounds.h,
            o.pos.x+o.bounds.xoff,o.pos.y+o.bounds.yoff,o.bounds.w,o.bounds.h) then
     move_y=false
    end
   end
  end

  if move_x then ent.pos.x = newx end
  if move_y then ent.pos.y = newy end

 end
end


function _init()
 --globals
 tz=true
 m={0,0}
 --add player
 player=newent(
 	newpos(30,50,4,8),
 	newsprite({{8,0},{12,0},{16,0},{20,0}},1),
 	newcontrols(0,1,2,3,playerinput),
  newintention(),
  newbounds(0,6,4,2),
  newanimation(2,"walk"))
 add(entities,player)
 --initialize map:
 --add trees
 add(entities,newent(
  newpos(20,30,16,16),
  newsprite({{56,0}},1),
  nil,
  nil,
  newbounds(4,13,8,3),
  nil)
  )
 add(entities,newent(
  newpos(40,60,16,16),
  newsprite({{56,0}},1),
  nil,
  nil,
  newbounds(4,13,8,3),
  nil)
  )
end

function _update60()
 --cs checks input
	cs.update()
	--as updates frames
	as.update()
 --ps moves entities
	ps.update()
	if btnp(‚ùé) then 
		stop_time()
 end
	
end

function _draw()
	gs.update()
end

function stop_time()

end

function change_tz(mx,my)
 local m={}
	tz=not(tz)
	for ent in all(entities) do
		if ent.intent==nil then
			del(entities,ent)
		end
	end
	if tz then
  m[1]=0
  m[2]=0
	 player.sprite.spritelist={{8,0},{12,0},{16,0},{20,0}}
		--add trees
	 add(entities,newent(
	  newpos(20,30,16,16),
	  newsprite({{56,0}},1),
	  nil,
	  nil,
	  newbounds(4,13,8,3),
	  nil)
	  )
	 add(entities,newent(
	  newpos(40,60,16,16),
	  newsprite({{56,0}},1),
	  nil,
	  nil,
	  newbounds(4,13,8,3),
	  nil)
	  )
	 else
   m[1]=16
   m[2]=0
	  player.sprite.spritelist={{8,8},{12,8},{16,8},{20,8}}
	  --add trees
		 add(entities,newent(
		  newpos(30,30,16,16),
		  newsprite({{72,0}},1),
		  nil,
		  nil,
		  newbounds(4,13,8,3),
		  nil)
		  )
		 add(entities,newent(
		  newpos(40,60,16,16),
		  newsprite({{72,0}},1),
		  nil,
		  nil,
		  newbounds(4,13,8,3),
		  nil)
		  )
	 end
  return m
end
__gfx__
00000000aaaaaaaaaaaaaaaa111111111111111166666666666666660000b3bbb3bb000000000000000000004494449400000000333333333333333333333333
00000000a1f1a1f1a1f1a1f11111111111c111116666666666566666000bbbb3bbb3b00000000000040000004494449400000000333443333334433333344333
00700700afffafffafffafff111111111c1cc111666666666565566600b3b3bbbb3bbb0000004400044400004494449400000000334994333349943333499433
00077000a222a222a222a2221111111111111111666666666666666600bbbbb3bbbbbb0000000440040000004494449400000000349449444494494444944943
000770002222222222222222111111111111111166666666666666660bb3b3bb3bbb3bb000040044440000004494449400000000349449444494494444944943
0070070022f2222f22f22f221111111111111c1166666666666665660bbbbbbbbb3bbbb000444004400440004494449400000000334994333349943333499433
00000000222222222222222211111111111cc1c166666666666556560b3bbb3b3bbbb3b000004404444400004494449400000000333443333334433333344333
0000000008808080080000081111111111111111666666666666666600b3bbbbb3bb3b0000000444400000004494449400000000333443333333333333344333
0000000044444444444444445555555544444444222222225555555500bbbb3bbbbbbb0000044444404440000000000000000000333443333334433333344333
00000000f1f1f1f1f1f1f1f155555555444444442222222255555555000b3bbb3bb3b00000000044444000000000000000000000333443333334433333344333
00000000ffffffffffffffff555555551111111166666666556556550000bb4bb43b000000000044440000000000000000000000334994333349943333499433
00000000cccccccccccccccc55555555111111116666666655555555000000444400000000000044440000000000000000000000349449443494494344944943
00000000cccccccccccccccc55555555111111116666666655565555000000444400000000000044440000000000000000000000349449443494494344944943
00000000ccfccccfccfccfcc55555555111111116666666655555565000000449400000000000044540000000000000000000000334994333349943333499433
00000000cccccccccccccccc55555555111111116666666656555555000004449440000000000444544000000000000000000000333443333334433333344333
00000000066060600600000655555555111111116666666655555555000044944944000000004454454400000000000000000000333333333334433333333333
00000000000000000000000033334444444433331111333333331111555522222222555566665555555566660000000000000000555555555555555555555555
00000000000000000000000033444444444444331133333333333311552222222222225566555555555555660000000000000000555dd555555dd555555dd555
0000000000000000000000003441111111111443133333333333333152266666666662256555555555555556000000000000000055d66d5555d66d5555d66d55
000000000000000000000000411111111111111413333333333333312666666666666662655555555555555600000000000000005d6dd6dddd6dd6dddd6dd6d5
000000000000000000000000111111111111111133333333333333336666666666666666555555555555555500000000000000005d6dd6dddd6dd6dddd6dd6d5
0000000000000000000000001111111111111111333333333333333366666666666666665555555555555555000000000000000055d66d5555d66d5555d66d55
00000000000000000000000011111111111111113333333333333333666666666666666655555555555555550000000000000000555dd555555dd555555dd555
00000000000000000000000011111111111111113333333333333333666666666666666655555555555555550000000000000000555dd55555555555555dd555
00000000333333333333333311111111111111113333333333333333666666666666666655555555555555550000000000000000555dd555555dd555555dd555
00000000333333333333333311111111111111113333333333333333666666666666666655555555555555550000000000000000555dd555555dd555555dd555
0000000033b33b33333333331111111111111111333333333333333366666666666666665555555555555555000000000000000055d66d5555d66d5555d66d55
000000003333333333333333111111111111111133333333333333336666666666666666555555555555555500000000000000005d6dd6dd5d6dd6d5dd6dd6d5
00000000333b333333333333311111111111111313333333333333315666666666666665655555555555555600000000000000005d6dd6dd5d6dd6d5dd6dd6d5
00000000333333b3333333333111111111111113133333333333333156666666666666656555555555555556000000000000000055d66d5555d66d5555d66d55
000000003b3333333333333333111111111111331133333333333311556666666666665566555555555555660000000000000000555dd555555dd555555dd555
0000000033333333333333333333111111113333111133333333111155556666666655556666555555556666000000000000000055555555555dd55555555555
__gff__
0000008080808000000000000080808000000000808000000000000000808080000000808000008080000000008080800000008080000080800000000080808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0d0e0e0e0e0e0e0e0e0e0e0e0e0e0e0f2d2e2e2e2e2e2e2e2e2e2e2e2e2e2e2f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1e32323232313231323232323232321e3e13131313161313131313131316133e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1e31323232323232323231313132321e3e16131313131313131316131313133e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1e32313232323132313232323231321e3e13161313131313161313131313133e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1e32323232323232231414141424321e3e13131313131613271515151528133e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1e32323232323132030303040303321e3e13131313131613050505060505133e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1e32313232313232030403030303321e3e131613131313130b0b0b0b0b0b163e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1e32323232323232330303030403321e3e13131313131313370505050605133e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1e32313232323132322603040303311e3e13131313131313132a05060505133e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1e31323231323232313203030303311e3e16161313131613131305050505133e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1e32323232323132323203040303311e3e13131313131313131305060505133e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1e32323132323231323233030334321e3e13131613131316131337050538133e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1e31323232323232313232323231321e3e13131313131313161313161313133e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1d0e0e0e0e0e0e0e0e0e0e0e0e0e0e1f3d2e2e2e2e2e2e2e2e2e2e2e2e2e2e3f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000700001f0511f0501f0401f0201f0001f0001f0001f0002f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010800001d550245501b550285501b550165000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
